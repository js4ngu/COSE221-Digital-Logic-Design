// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/20/2023 17:09:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_vlg_sample_tst(
	CLOCK_50_2,
	SW,
	sampler_tx
);
input  CLOCK_50_2;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50_2 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab5_vlg_check_tst (
	coffe,
	money,
	money_H,
	money_L,
	sampler_rx
);
input [4:0] coffe;
input [4:0] money;
input [4:0] money_H;
input [4:0] money_L;
input sampler_rx;

reg [4:0] coffe_expected;
reg [4:0] money_expected;
reg [4:0] money_H_expected;
reg [4:0] money_L_expected;

reg [4:0] coffe_prev;
reg [4:0] money_prev;
reg [4:0] money_H_prev;
reg [4:0] money_L_prev;

reg [4:0] coffe_expected_prev;
reg [4:0] money_expected_prev;
reg [4:0] money_H_expected_prev;
reg [4:0] money_L_expected_prev;

reg [4:0] last_coffe_exp;
reg [4:0] last_money_exp;
reg [4:0] last_money_H_exp;
reg [4:0] last_money_L_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	coffe_prev = coffe;
	money_prev = money;
	money_H_prev = money_H;
	money_L_prev = money_L;
end

// update expected /o prevs

always @(trigger)
begin
	coffe_expected_prev = coffe_expected;
	money_expected_prev = money_expected;
	money_H_expected_prev = money_H_expected;
	money_L_expected_prev = money_L_expected;
end


// expected money[ 4 ]
initial
begin
	money_expected[4] = 1'bX;
end 
// expected money[ 3 ]
initial
begin
	money_expected[3] = 1'bX;
end 
// expected money[ 2 ]
initial
begin
	money_expected[2] = 1'bX;
end 
// expected money[ 1 ]
initial
begin
	money_expected[1] = 1'bX;
end 
// expected money[ 0 ]
initial
begin
	money_expected[0] = 1'bX;
end 
// expected money_H[ 4 ]
initial
begin
	money_H_expected[4] = 1'bX;
end 
// expected money_H[ 3 ]
initial
begin
	money_H_expected[3] = 1'bX;
end 
// expected money_H[ 2 ]
initial
begin
	money_H_expected[2] = 1'bX;
end 
// expected money_H[ 1 ]
initial
begin
	money_H_expected[1] = 1'bX;
end 
// expected money_H[ 0 ]
initial
begin
	money_H_expected[0] = 1'bX;
end 
// expected money_L[ 4 ]
initial
begin
	money_L_expected[4] = 1'bX;
end 
// expected money_L[ 3 ]
initial
begin
	money_L_expected[3] = 1'bX;
end 
// expected money_L[ 2 ]
initial
begin
	money_L_expected[2] = 1'bX;
end 
// expected money_L[ 1 ]
initial
begin
	money_L_expected[1] = 1'bX;
end 
// expected money_L[ 0 ]
initial
begin
	money_L_expected[0] = 1'bX;
end 
// expected coffe[ 4 ]
initial
begin
	coffe_expected[4] = 1'bX;
end 
// expected coffe[ 3 ]
initial
begin
	coffe_expected[3] = 1'bX;
end 
// expected coffe[ 2 ]
initial
begin
	coffe_expected[2] = 1'bX;
end 
// expected coffe[ 1 ]
initial
begin
	coffe_expected[1] = 1'bX;
end 
// expected coffe[ 0 ]
initial
begin
	coffe_expected[0] = 1'bX;
end 
// generate trigger
always @(coffe_expected or coffe or money_expected or money or money_H_expected or money_H or money_L_expected or money_L)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected coffe = %b | expected money = %b | expected money_H = %b | expected money_L = %b | ",coffe_expected_prev,money_expected_prev,money_H_expected_prev,money_L_expected_prev);
	$display("| real coffe = %b | real money = %b | real money_H = %b | real money_L = %b | ",coffe_prev,money_prev,money_H_prev,money_L_prev);
`endif
	if (
		( coffe_expected_prev[0] !== 1'bx ) && ( coffe_prev[0] !== coffe_expected_prev[0] )
		&& ((coffe_expected_prev[0] !== last_coffe_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coffe[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coffe_expected_prev);
		$display ("     Real value = %b", coffe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coffe_exp[0] = coffe_expected_prev[0];
	end
	if (
		( coffe_expected_prev[1] !== 1'bx ) && ( coffe_prev[1] !== coffe_expected_prev[1] )
		&& ((coffe_expected_prev[1] !== last_coffe_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coffe[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coffe_expected_prev);
		$display ("     Real value = %b", coffe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coffe_exp[1] = coffe_expected_prev[1];
	end
	if (
		( coffe_expected_prev[2] !== 1'bx ) && ( coffe_prev[2] !== coffe_expected_prev[2] )
		&& ((coffe_expected_prev[2] !== last_coffe_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coffe[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coffe_expected_prev);
		$display ("     Real value = %b", coffe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coffe_exp[2] = coffe_expected_prev[2];
	end
	if (
		( coffe_expected_prev[3] !== 1'bx ) && ( coffe_prev[3] !== coffe_expected_prev[3] )
		&& ((coffe_expected_prev[3] !== last_coffe_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coffe[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coffe_expected_prev);
		$display ("     Real value = %b", coffe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coffe_exp[3] = coffe_expected_prev[3];
	end
	if (
		( coffe_expected_prev[4] !== 1'bx ) && ( coffe_prev[4] !== coffe_expected_prev[4] )
		&& ((coffe_expected_prev[4] !== last_coffe_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port coffe[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", coffe_expected_prev);
		$display ("     Real value = %b", coffe_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_coffe_exp[4] = coffe_expected_prev[4];
	end
	if (
		( money_expected_prev[0] !== 1'bx ) && ( money_prev[0] !== money_expected_prev[0] )
		&& ((money_expected_prev[0] !== last_money_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_expected_prev);
		$display ("     Real value = %b", money_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_money_exp[0] = money_expected_prev[0];
	end
	if (
		( money_expected_prev[1] !== 1'bx ) && ( money_prev[1] !== money_expected_prev[1] )
		&& ((money_expected_prev[1] !== last_money_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_expected_prev);
		$display ("     Real value = %b", money_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_money_exp[1] = money_expected_prev[1];
	end
	if (
		( money_expected_prev[2] !== 1'bx ) && ( money_prev[2] !== money_expected_prev[2] )
		&& ((money_expected_prev[2] !== last_money_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_expected_prev);
		$display ("     Real value = %b", money_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_money_exp[2] = money_expected_prev[2];
	end
	if (
		( money_expected_prev[3] !== 1'bx ) && ( money_prev[3] !== money_expected_prev[3] )
		&& ((money_expected_prev[3] !== last_money_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_expected_prev);
		$display ("     Real value = %b", money_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_money_exp[3] = money_expected_prev[3];
	end
	if (
		( money_expected_prev[4] !== 1'bx ) && ( money_prev[4] !== money_expected_prev[4] )
		&& ((money_expected_prev[4] !== last_money_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_expected_prev);
		$display ("     Real value = %b", money_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_money_exp[4] = money_expected_prev[4];
	end
	if (
		( money_H_expected_prev[0] !== 1'bx ) && ( money_H_prev[0] !== money_H_expected_prev[0] )
		&& ((money_H_expected_prev[0] !== last_money_H_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_H[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_H_expected_prev);
		$display ("     Real value = %b", money_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_money_H_exp[0] = money_H_expected_prev[0];
	end
	if (
		( money_H_expected_prev[1] !== 1'bx ) && ( money_H_prev[1] !== money_H_expected_prev[1] )
		&& ((money_H_expected_prev[1] !== last_money_H_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_H[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_H_expected_prev);
		$display ("     Real value = %b", money_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_money_H_exp[1] = money_H_expected_prev[1];
	end
	if (
		( money_H_expected_prev[2] !== 1'bx ) && ( money_H_prev[2] !== money_H_expected_prev[2] )
		&& ((money_H_expected_prev[2] !== last_money_H_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_H[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_H_expected_prev);
		$display ("     Real value = %b", money_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_money_H_exp[2] = money_H_expected_prev[2];
	end
	if (
		( money_H_expected_prev[3] !== 1'bx ) && ( money_H_prev[3] !== money_H_expected_prev[3] )
		&& ((money_H_expected_prev[3] !== last_money_H_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_H[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_H_expected_prev);
		$display ("     Real value = %b", money_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_money_H_exp[3] = money_H_expected_prev[3];
	end
	if (
		( money_H_expected_prev[4] !== 1'bx ) && ( money_H_prev[4] !== money_H_expected_prev[4] )
		&& ((money_H_expected_prev[4] !== last_money_H_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_H[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_H_expected_prev);
		$display ("     Real value = %b", money_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_money_H_exp[4] = money_H_expected_prev[4];
	end
	if (
		( money_L_expected_prev[0] !== 1'bx ) && ( money_L_prev[0] !== money_L_expected_prev[0] )
		&& ((money_L_expected_prev[0] !== last_money_L_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_L[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_L_expected_prev);
		$display ("     Real value = %b", money_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_money_L_exp[0] = money_L_expected_prev[0];
	end
	if (
		( money_L_expected_prev[1] !== 1'bx ) && ( money_L_prev[1] !== money_L_expected_prev[1] )
		&& ((money_L_expected_prev[1] !== last_money_L_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_L[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_L_expected_prev);
		$display ("     Real value = %b", money_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_money_L_exp[1] = money_L_expected_prev[1];
	end
	if (
		( money_L_expected_prev[2] !== 1'bx ) && ( money_L_prev[2] !== money_L_expected_prev[2] )
		&& ((money_L_expected_prev[2] !== last_money_L_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_L[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_L_expected_prev);
		$display ("     Real value = %b", money_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_money_L_exp[2] = money_L_expected_prev[2];
	end
	if (
		( money_L_expected_prev[3] !== 1'bx ) && ( money_L_prev[3] !== money_L_expected_prev[3] )
		&& ((money_L_expected_prev[3] !== last_money_L_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_L[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_L_expected_prev);
		$display ("     Real value = %b", money_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_money_L_exp[3] = money_L_expected_prev[3];
	end
	if (
		( money_L_expected_prev[4] !== 1'bx ) && ( money_L_prev[4] !== money_L_expected_prev[4] )
		&& ((money_L_expected_prev[4] !== last_money_L_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port money_L[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", money_L_expected_prev);
		$display ("     Real value = %b", money_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_money_L_exp[4] = money_L_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50_2;
reg [9:0] SW;
// wires                                               
wire [4:0] coffe;
wire [4:0] money;
wire [4:0] money_H;
wire [4:0] money_L;

wire sampler;                             

// assign statements (if any)                          
lab5 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50_2(CLOCK_50_2),
	.SW(SW),
	.coffe(coffe),
	.money(money),
	.money_H(money_H),
	.money_L(money_L)
);

// CLOCK_50_2
always
begin
	CLOCK_50_2 = 1'b0;
	CLOCK_50_2 = #500 1'b1;
	#500;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	repeat(16)
	begin
		SW[3] = 1'b0;
		SW[3] = #59400 1'b1;
		# 600;
	end
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
always
begin
	SW[0] = 1'b0;
	SW[0] = #1000 1'b1;
	#1000;
end 

lab5_vlg_sample_tst tb_sample (
	.CLOCK_50_2(CLOCK_50_2),
	.SW(SW),
	.sampler_tx(sampler)
);

lab5_vlg_check_tst tb_out(
	.coffe(coffe),
	.money(money),
	.money_H(money_H),
	.money_L(money_L),
	.sampler_rx(sampler)
);
endmodule

