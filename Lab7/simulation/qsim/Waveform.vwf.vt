// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/26/2023 16:11:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab7_vlg_sample_tst(
	BUTTON,
	CLOCK_50_2,
	SW,
	sampler_tx
);
input [9:0] BUTTON;
input  CLOCK_50_2;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(BUTTON or CLOCK_50_2 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab7_vlg_check_tst (
	Alarm_flag,
	FSM_flag,
	LEDG,
	min,
	presclaerFlag,
	sec,
	smallSec,
	sampler_rx
);
input  Alarm_flag;
input [1:0] FSM_flag;
input [9:0] LEDG;
input [8:0] min;
input  presclaerFlag;
input [8:0] sec;
input [8:0] smallSec;
input sampler_rx;

reg  Alarm_flag_expected;
reg [1:0] FSM_flag_expected;
reg [9:0] LEDG_expected;
reg [8:0] min_expected;
reg  presclaerFlag_expected;
reg [8:0] sec_expected;
reg [8:0] smallSec_expected;

reg  Alarm_flag_prev;
reg [1:0] FSM_flag_prev;
reg [9:0] LEDG_prev;
reg [8:0] min_prev;
reg  presclaerFlag_prev;
reg [8:0] sec_prev;
reg [8:0] smallSec_prev;

reg  Alarm_flag_expected_prev;
reg [1:0] FSM_flag_expected_prev;
reg [9:0] LEDG_expected_prev;
reg [8:0] min_expected_prev;
reg  presclaerFlag_expected_prev;
reg [8:0] sec_expected_prev;
reg [8:0] smallSec_expected_prev;

reg  last_Alarm_flag_exp;
reg [1:0] last_FSM_flag_exp;
reg [9:0] last_LEDG_exp;
reg [8:0] last_min_exp;
reg  last_presclaerFlag_exp;
reg [8:0] last_sec_exp;
reg [8:0] last_smallSec_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Alarm_flag_prev = Alarm_flag;
	FSM_flag_prev = FSM_flag;
	LEDG_prev = LEDG;
	min_prev = min;
	presclaerFlag_prev = presclaerFlag;
	sec_prev = sec;
	smallSec_prev = smallSec;
end

// update expected /o prevs

always @(trigger)
begin
	Alarm_flag_expected_prev = Alarm_flag_expected;
	FSM_flag_expected_prev = FSM_flag_expected;
	LEDG_expected_prev = LEDG_expected;
	min_expected_prev = min_expected;
	presclaerFlag_expected_prev = presclaerFlag_expected;
	sec_expected_prev = sec_expected;
	smallSec_expected_prev = smallSec_expected;
end



// expected Alarm_flag
initial
begin
	Alarm_flag_expected = 1'bX;
end 
// expected FSM_flag[ 1 ]
initial
begin
	FSM_flag_expected[1] = 1'bX;
end 
// expected FSM_flag[ 0 ]
initial
begin
	FSM_flag_expected[0] = 1'bX;
end 
// expected LEDG[ 9 ]
initial
begin
	LEDG_expected[9] = 1'bX;
end 
// expected LEDG[ 8 ]
initial
begin
	LEDG_expected[8] = 1'bX;
end 
// expected LEDG[ 7 ]
initial
begin
	LEDG_expected[7] = 1'bX;
end 
// expected LEDG[ 6 ]
initial
begin
	LEDG_expected[6] = 1'bX;
end 
// expected LEDG[ 5 ]
initial
begin
	LEDG_expected[5] = 1'bX;
end 
// expected LEDG[ 4 ]
initial
begin
	LEDG_expected[4] = 1'bX;
end 
// expected LEDG[ 3 ]
initial
begin
	LEDG_expected[3] = 1'bX;
end 
// expected LEDG[ 2 ]
initial
begin
	LEDG_expected[2] = 1'bX;
end 
// expected LEDG[ 1 ]
initial
begin
	LEDG_expected[1] = 1'bX;
end 
// expected LEDG[ 0 ]
initial
begin
	LEDG_expected[0] = 1'bX;
end 
// expected min[ 8 ]
initial
begin
	min_expected[8] = 1'bX;
end 
// expected min[ 7 ]
initial
begin
	min_expected[7] = 1'bX;
end 
// expected min[ 6 ]
initial
begin
	min_expected[6] = 1'bX;
end 
// expected min[ 5 ]
initial
begin
	min_expected[5] = 1'bX;
end 
// expected min[ 4 ]
initial
begin
	min_expected[4] = 1'bX;
end 
// expected min[ 3 ]
initial
begin
	min_expected[3] = 1'bX;
end 
// expected min[ 2 ]
initial
begin
	min_expected[2] = 1'bX;
end 
// expected min[ 1 ]
initial
begin
	min_expected[1] = 1'bX;
end 
// expected min[ 0 ]
initial
begin
	min_expected[0] = 1'bX;
end 

// expected presclaerFlag
initial
begin
	presclaerFlag_expected = 1'bX;
end 
// expected sec[ 8 ]
initial
begin
	sec_expected[8] = 1'bX;
end 
// expected sec[ 7 ]
initial
begin
	sec_expected[7] = 1'bX;
end 
// expected sec[ 6 ]
initial
begin
	sec_expected[6] = 1'bX;
end 
// expected sec[ 5 ]
initial
begin
	sec_expected[5] = 1'bX;
end 
// expected sec[ 4 ]
initial
begin
	sec_expected[4] = 1'bX;
end 
// expected sec[ 3 ]
initial
begin
	sec_expected[3] = 1'bX;
end 
// expected sec[ 2 ]
initial
begin
	sec_expected[2] = 1'bX;
end 
// expected sec[ 1 ]
initial
begin
	sec_expected[1] = 1'bX;
end 
// expected sec[ 0 ]
initial
begin
	sec_expected[0] = 1'bX;
end 
// expected smallSec[ 8 ]
initial
begin
	smallSec_expected[8] = 1'bX;
end 
// expected smallSec[ 7 ]
initial
begin
	smallSec_expected[7] = 1'bX;
end 
// expected smallSec[ 6 ]
initial
begin
	smallSec_expected[6] = 1'bX;
end 
// expected smallSec[ 5 ]
initial
begin
	smallSec_expected[5] = 1'bX;
end 
// expected smallSec[ 4 ]
initial
begin
	smallSec_expected[4] = 1'bX;
end 
// expected smallSec[ 3 ]
initial
begin
	smallSec_expected[3] = 1'bX;
end 
// expected smallSec[ 2 ]
initial
begin
	smallSec_expected[2] = 1'bX;
end 
// expected smallSec[ 1 ]
initial
begin
	smallSec_expected[1] = 1'bX;
end 
// expected smallSec[ 0 ]
initial
begin
	smallSec_expected[0] = 1'bX;
end 
// generate trigger
always @(Alarm_flag_expected or Alarm_flag or FSM_flag_expected or FSM_flag or LEDG_expected or LEDG or min_expected or min or presclaerFlag_expected or presclaerFlag or sec_expected or sec or smallSec_expected or smallSec)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Alarm_flag = %b | expected FSM_flag = %b | expected LEDG = %b | expected min = %b | expected presclaerFlag = %b | expected sec = %b | expected smallSec = %b | ",Alarm_flag_expected_prev,FSM_flag_expected_prev,LEDG_expected_prev,min_expected_prev,presclaerFlag_expected_prev,sec_expected_prev,smallSec_expected_prev);
	$display("| real Alarm_flag = %b | real FSM_flag = %b | real LEDG = %b | real min = %b | real presclaerFlag = %b | real sec = %b | real smallSec = %b | ",Alarm_flag_prev,FSM_flag_prev,LEDG_prev,min_prev,presclaerFlag_prev,sec_prev,smallSec_prev);
`endif
	if (
		( Alarm_flag_expected_prev !== 1'bx ) && ( Alarm_flag_prev !== Alarm_flag_expected_prev )
		&& ((Alarm_flag_expected_prev !== last_Alarm_flag_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Alarm_flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Alarm_flag_expected_prev);
		$display ("     Real value = %b", Alarm_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Alarm_flag_exp = Alarm_flag_expected_prev;
	end
	if (
		( FSM_flag_expected_prev[0] !== 1'bx ) && ( FSM_flag_prev[0] !== FSM_flag_expected_prev[0] )
		&& ((FSM_flag_expected_prev[0] !== last_FSM_flag_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FSM_flag[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FSM_flag_expected_prev);
		$display ("     Real value = %b", FSM_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FSM_flag_exp[0] = FSM_flag_expected_prev[0];
	end
	if (
		( FSM_flag_expected_prev[1] !== 1'bx ) && ( FSM_flag_prev[1] !== FSM_flag_expected_prev[1] )
		&& ((FSM_flag_expected_prev[1] !== last_FSM_flag_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FSM_flag[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FSM_flag_expected_prev);
		$display ("     Real value = %b", FSM_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FSM_flag_exp[1] = FSM_flag_expected_prev[1];
	end
	if (
		( LEDG_expected_prev[0] !== 1'bx ) && ( LEDG_prev[0] !== LEDG_expected_prev[0] )
		&& ((LEDG_expected_prev[0] !== last_LEDG_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[0] = LEDG_expected_prev[0];
	end
	if (
		( LEDG_expected_prev[1] !== 1'bx ) && ( LEDG_prev[1] !== LEDG_expected_prev[1] )
		&& ((LEDG_expected_prev[1] !== last_LEDG_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[1] = LEDG_expected_prev[1];
	end
	if (
		( LEDG_expected_prev[2] !== 1'bx ) && ( LEDG_prev[2] !== LEDG_expected_prev[2] )
		&& ((LEDG_expected_prev[2] !== last_LEDG_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[2] = LEDG_expected_prev[2];
	end
	if (
		( LEDG_expected_prev[3] !== 1'bx ) && ( LEDG_prev[3] !== LEDG_expected_prev[3] )
		&& ((LEDG_expected_prev[3] !== last_LEDG_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[3] = LEDG_expected_prev[3];
	end
	if (
		( LEDG_expected_prev[4] !== 1'bx ) && ( LEDG_prev[4] !== LEDG_expected_prev[4] )
		&& ((LEDG_expected_prev[4] !== last_LEDG_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[4] = LEDG_expected_prev[4];
	end
	if (
		( LEDG_expected_prev[5] !== 1'bx ) && ( LEDG_prev[5] !== LEDG_expected_prev[5] )
		&& ((LEDG_expected_prev[5] !== last_LEDG_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[5] = LEDG_expected_prev[5];
	end
	if (
		( LEDG_expected_prev[6] !== 1'bx ) && ( LEDG_prev[6] !== LEDG_expected_prev[6] )
		&& ((LEDG_expected_prev[6] !== last_LEDG_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[6] = LEDG_expected_prev[6];
	end
	if (
		( LEDG_expected_prev[7] !== 1'bx ) && ( LEDG_prev[7] !== LEDG_expected_prev[7] )
		&& ((LEDG_expected_prev[7] !== last_LEDG_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[7] = LEDG_expected_prev[7];
	end
	if (
		( LEDG_expected_prev[8] !== 1'bx ) && ( LEDG_prev[8] !== LEDG_expected_prev[8] )
		&& ((LEDG_expected_prev[8] !== last_LEDG_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[8] = LEDG_expected_prev[8];
	end
	if (
		( LEDG_expected_prev[9] !== 1'bx ) && ( LEDG_prev[9] !== LEDG_expected_prev[9] )
		&& ((LEDG_expected_prev[9] !== last_LEDG_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LEDG_exp[9] = LEDG_expected_prev[9];
	end
	if (
		( min_expected_prev[0] !== 1'bx ) && ( min_prev[0] !== min_expected_prev[0] )
		&& ((min_expected_prev[0] !== last_min_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[0] = min_expected_prev[0];
	end
	if (
		( min_expected_prev[1] !== 1'bx ) && ( min_prev[1] !== min_expected_prev[1] )
		&& ((min_expected_prev[1] !== last_min_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[1] = min_expected_prev[1];
	end
	if (
		( min_expected_prev[2] !== 1'bx ) && ( min_prev[2] !== min_expected_prev[2] )
		&& ((min_expected_prev[2] !== last_min_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[2] = min_expected_prev[2];
	end
	if (
		( min_expected_prev[3] !== 1'bx ) && ( min_prev[3] !== min_expected_prev[3] )
		&& ((min_expected_prev[3] !== last_min_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[3] = min_expected_prev[3];
	end
	if (
		( min_expected_prev[4] !== 1'bx ) && ( min_prev[4] !== min_expected_prev[4] )
		&& ((min_expected_prev[4] !== last_min_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[4] = min_expected_prev[4];
	end
	if (
		( min_expected_prev[5] !== 1'bx ) && ( min_prev[5] !== min_expected_prev[5] )
		&& ((min_expected_prev[5] !== last_min_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[5] = min_expected_prev[5];
	end
	if (
		( min_expected_prev[6] !== 1'bx ) && ( min_prev[6] !== min_expected_prev[6] )
		&& ((min_expected_prev[6] !== last_min_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[6] = min_expected_prev[6];
	end
	if (
		( min_expected_prev[7] !== 1'bx ) && ( min_prev[7] !== min_expected_prev[7] )
		&& ((min_expected_prev[7] !== last_min_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[7] = min_expected_prev[7];
	end
	if (
		( min_expected_prev[8] !== 1'bx ) && ( min_prev[8] !== min_expected_prev[8] )
		&& ((min_expected_prev[8] !== last_min_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port min[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", min_expected_prev);
		$display ("     Real value = %b", min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_min_exp[8] = min_expected_prev[8];
	end
	if (
		( presclaerFlag_expected_prev !== 1'bx ) && ( presclaerFlag_prev !== presclaerFlag_expected_prev )
		&& ((presclaerFlag_expected_prev !== last_presclaerFlag_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port presclaerFlag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", presclaerFlag_expected_prev);
		$display ("     Real value = %b", presclaerFlag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_presclaerFlag_exp = presclaerFlag_expected_prev;
	end
	if (
		( sec_expected_prev[0] !== 1'bx ) && ( sec_prev[0] !== sec_expected_prev[0] )
		&& ((sec_expected_prev[0] !== last_sec_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[0] = sec_expected_prev[0];
	end
	if (
		( sec_expected_prev[1] !== 1'bx ) && ( sec_prev[1] !== sec_expected_prev[1] )
		&& ((sec_expected_prev[1] !== last_sec_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[1] = sec_expected_prev[1];
	end
	if (
		( sec_expected_prev[2] !== 1'bx ) && ( sec_prev[2] !== sec_expected_prev[2] )
		&& ((sec_expected_prev[2] !== last_sec_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[2] = sec_expected_prev[2];
	end
	if (
		( sec_expected_prev[3] !== 1'bx ) && ( sec_prev[3] !== sec_expected_prev[3] )
		&& ((sec_expected_prev[3] !== last_sec_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[3] = sec_expected_prev[3];
	end
	if (
		( sec_expected_prev[4] !== 1'bx ) && ( sec_prev[4] !== sec_expected_prev[4] )
		&& ((sec_expected_prev[4] !== last_sec_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[4] = sec_expected_prev[4];
	end
	if (
		( sec_expected_prev[5] !== 1'bx ) && ( sec_prev[5] !== sec_expected_prev[5] )
		&& ((sec_expected_prev[5] !== last_sec_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[5] = sec_expected_prev[5];
	end
	if (
		( sec_expected_prev[6] !== 1'bx ) && ( sec_prev[6] !== sec_expected_prev[6] )
		&& ((sec_expected_prev[6] !== last_sec_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[6] = sec_expected_prev[6];
	end
	if (
		( sec_expected_prev[7] !== 1'bx ) && ( sec_prev[7] !== sec_expected_prev[7] )
		&& ((sec_expected_prev[7] !== last_sec_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[7] = sec_expected_prev[7];
	end
	if (
		( sec_expected_prev[8] !== 1'bx ) && ( sec_prev[8] !== sec_expected_prev[8] )
		&& ((sec_expected_prev[8] !== last_sec_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_expected_prev);
		$display ("     Real value = %b", sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sec_exp[8] = sec_expected_prev[8];
	end
	if (
		( smallSec_expected_prev[0] !== 1'bx ) && ( smallSec_prev[0] !== smallSec_expected_prev[0] )
		&& ((smallSec_expected_prev[0] !== last_smallSec_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[0] = smallSec_expected_prev[0];
	end
	if (
		( smallSec_expected_prev[1] !== 1'bx ) && ( smallSec_prev[1] !== smallSec_expected_prev[1] )
		&& ((smallSec_expected_prev[1] !== last_smallSec_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[1] = smallSec_expected_prev[1];
	end
	if (
		( smallSec_expected_prev[2] !== 1'bx ) && ( smallSec_prev[2] !== smallSec_expected_prev[2] )
		&& ((smallSec_expected_prev[2] !== last_smallSec_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[2] = smallSec_expected_prev[2];
	end
	if (
		( smallSec_expected_prev[3] !== 1'bx ) && ( smallSec_prev[3] !== smallSec_expected_prev[3] )
		&& ((smallSec_expected_prev[3] !== last_smallSec_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[3] = smallSec_expected_prev[3];
	end
	if (
		( smallSec_expected_prev[4] !== 1'bx ) && ( smallSec_prev[4] !== smallSec_expected_prev[4] )
		&& ((smallSec_expected_prev[4] !== last_smallSec_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[4] = smallSec_expected_prev[4];
	end
	if (
		( smallSec_expected_prev[5] !== 1'bx ) && ( smallSec_prev[5] !== smallSec_expected_prev[5] )
		&& ((smallSec_expected_prev[5] !== last_smallSec_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[5] = smallSec_expected_prev[5];
	end
	if (
		( smallSec_expected_prev[6] !== 1'bx ) && ( smallSec_prev[6] !== smallSec_expected_prev[6] )
		&& ((smallSec_expected_prev[6] !== last_smallSec_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[6] = smallSec_expected_prev[6];
	end
	if (
		( smallSec_expected_prev[7] !== 1'bx ) && ( smallSec_prev[7] !== smallSec_expected_prev[7] )
		&& ((smallSec_expected_prev[7] !== last_smallSec_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[7] = smallSec_expected_prev[7];
	end
	if (
		( smallSec_expected_prev[8] !== 1'bx ) && ( smallSec_prev[8] !== smallSec_expected_prev[8] )
		&& ((smallSec_expected_prev[8] !== last_smallSec_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port smallSec[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", smallSec_expected_prev);
		$display ("     Real value = %b", smallSec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_smallSec_exp[8] = smallSec_expected_prev[8];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] BUTTON;
reg CLOCK_50_2;
reg [9:0] SW;
// wires                                               
wire Alarm_flag;
wire [1:0] FSM_flag;
wire [9:0] LEDG;
wire [8:0] min;
wire presclaerFlag;
wire [8:0] sec;
wire [8:0] smallSec;

wire sampler;                             

// assign statements (if any)                          
lab7 i1 (
// port map - connection between master ports and signals/registers   
	.Alarm_flag(Alarm_flag),
	.BUTTON(BUTTON),
	.CLOCK_50_2(CLOCK_50_2),
	.FSM_flag(FSM_flag),
	.LEDG(LEDG),
	.SW(SW),
	.min(min),
	.presclaerFlag(presclaerFlag),
	.sec(sec),
	.smallSec(smallSec)
);

// CLOCK_50_2
always
begin
	CLOCK_50_2 = 1'b0;
	CLOCK_50_2 = #500 1'b1;
	#500;
end 
// BUTTON[ 9 ]
initial
begin
	BUTTON[9] = 1'b0;
end 
// BUTTON[ 8 ]
initial
begin
	BUTTON[8] = 1'b0;
end 
// BUTTON[ 7 ]
initial
begin
	BUTTON[7] = 1'b0;
end 
// BUTTON[ 6 ]
initial
begin
	BUTTON[6] = 1'b0;
end 
// BUTTON[ 5 ]
initial
begin
	BUTTON[5] = 1'b0;
end 
// BUTTON[ 4 ]
initial
begin
	BUTTON[4] = 1'b0;
end 
// BUTTON[ 3 ]
initial
begin
	BUTTON[3] = 1'b0;
end 
// BUTTON[ 2 ]
always
begin
	BUTTON[2] = 1'b0;
	BUTTON[2] = #2500 1'b1;
	#2500;
end 
// BUTTON[ 1 ]
always
begin
	BUTTON[1] = 1'b0;
	BUTTON[1] = #2500 1'b1;
	#2500;
end 
// BUTTON[ 0 ]
initial
begin
	BUTTON[0] = 1'b0;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b1;
	SW[8] = #50000 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

lab7_vlg_sample_tst tb_sample (
	.BUTTON(BUTTON),
	.CLOCK_50_2(CLOCK_50_2),
	.SW(SW),
	.sampler_tx(sampler)
);

lab7_vlg_check_tst tb_out(
	.Alarm_flag(Alarm_flag),
	.FSM_flag(FSM_flag),
	.LEDG(LEDG),
	.min(min),
	.presclaerFlag(presclaerFlag),
	.sec(sec),
	.smallSec(smallSec),
	.sampler_rx(sampler)
);
endmodule

