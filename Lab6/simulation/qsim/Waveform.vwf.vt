// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/20/2023 18:18:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6_vlg_sample_tst(
	CLOCK_50_2,
	SW,
	sampler_tx
);
input  CLOCK_50_2;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50_2 or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab6_vlg_check_tst (
	LEDG,
	cnt,
	flag,
	sampler_rx
);
input [9:0] LEDG;
input [31:0] cnt;
input  flag;
input sampler_rx;

reg [9:0] LEDG_expected;
reg [31:0] cnt_expected;
reg  flag_expected;

reg [9:0] LEDG_prev;
reg [31:0] cnt_prev;
reg  flag_prev;

reg [9:0] LEDG_expected_prev;
reg [31:0] cnt_expected_prev;
reg  flag_expected_prev;

reg [9:0] last_LEDG_exp;
reg [31:0] last_cnt_exp;
reg  last_flag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEDG_prev = LEDG;
	cnt_prev = cnt;
	flag_prev = flag;
end

// update expected /o prevs

always @(trigger)
begin
	LEDG_expected_prev = LEDG_expected;
	cnt_expected_prev = cnt_expected;
	flag_expected_prev = flag_expected;
end


// expected LEDG[ 9 ]
initial
begin
	LEDG_expected[9] = 1'bX;
end 
// expected LEDG[ 8 ]
initial
begin
	LEDG_expected[8] = 1'bX;
end 
// expected LEDG[ 7 ]
initial
begin
	LEDG_expected[7] = 1'bX;
end 
// expected LEDG[ 6 ]
initial
begin
	LEDG_expected[6] = 1'bX;
end 
// expected LEDG[ 5 ]
initial
begin
	LEDG_expected[5] = 1'bX;
end 
// expected LEDG[ 4 ]
initial
begin
	LEDG_expected[4] = 1'bX;
end 
// expected LEDG[ 3 ]
initial
begin
	LEDG_expected[3] = 1'bX;
end 
// expected LEDG[ 2 ]
initial
begin
	LEDG_expected[2] = 1'bX;
end 
// expected LEDG[ 1 ]
initial
begin
	LEDG_expected[1] = 1'bX;
end 
// expected LEDG[ 0 ]
initial
begin
	LEDG_expected[0] = 1'bX;
end 
// expected cnt[ 31 ]
initial
begin
	cnt_expected[31] = 1'bX;
end 
// expected cnt[ 30 ]
initial
begin
	cnt_expected[30] = 1'bX;
end 
// expected cnt[ 29 ]
initial
begin
	cnt_expected[29] = 1'bX;
end 
// expected cnt[ 28 ]
initial
begin
	cnt_expected[28] = 1'bX;
end 
// expected cnt[ 27 ]
initial
begin
	cnt_expected[27] = 1'bX;
end 
// expected cnt[ 26 ]
initial
begin
	cnt_expected[26] = 1'bX;
end 
// expected cnt[ 25 ]
initial
begin
	cnt_expected[25] = 1'bX;
end 
// expected cnt[ 24 ]
initial
begin
	cnt_expected[24] = 1'bX;
end 
// expected cnt[ 23 ]
initial
begin
	cnt_expected[23] = 1'bX;
end 
// expected cnt[ 22 ]
initial
begin
	cnt_expected[22] = 1'bX;
end 
// expected cnt[ 21 ]
initial
begin
	cnt_expected[21] = 1'bX;
end 
// expected cnt[ 20 ]
initial
begin
	cnt_expected[20] = 1'bX;
end 
// expected cnt[ 19 ]
initial
begin
	cnt_expected[19] = 1'bX;
end 
// expected cnt[ 18 ]
initial
begin
	cnt_expected[18] = 1'bX;
end 
// expected cnt[ 17 ]
initial
begin
	cnt_expected[17] = 1'bX;
end 
// expected cnt[ 16 ]
initial
begin
	cnt_expected[16] = 1'bX;
end 
// expected cnt[ 15 ]
initial
begin
	cnt_expected[15] = 1'bX;
end 
// expected cnt[ 14 ]
initial
begin
	cnt_expected[14] = 1'bX;
end 
// expected cnt[ 13 ]
initial
begin
	cnt_expected[13] = 1'bX;
end 
// expected cnt[ 12 ]
initial
begin
	cnt_expected[12] = 1'bX;
end 
// expected cnt[ 11 ]
initial
begin
	cnt_expected[11] = 1'bX;
end 
// expected cnt[ 10 ]
initial
begin
	cnt_expected[10] = 1'bX;
end 
// expected cnt[ 9 ]
initial
begin
	cnt_expected[9] = 1'bX;
end 
// expected cnt[ 8 ]
initial
begin
	cnt_expected[8] = 1'bX;
end 
// expected cnt[ 7 ]
initial
begin
	cnt_expected[7] = 1'bX;
end 
// expected cnt[ 6 ]
initial
begin
	cnt_expected[6] = 1'bX;
end 
// expected cnt[ 5 ]
initial
begin
	cnt_expected[5] = 1'bX;
end 
// expected cnt[ 4 ]
initial
begin
	cnt_expected[4] = 1'bX;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
end 

// expected flag
initial
begin
	flag_expected = 1'bX;
end 
// generate trigger
always @(LEDG_expected or LEDG or cnt_expected or cnt or flag_expected or flag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEDG = %b | expected cnt = %b | expected flag = %b | ",LEDG_expected_prev,cnt_expected_prev,flag_expected_prev);
	$display("| real LEDG = %b | real cnt = %b | real flag = %b | ",LEDG_prev,cnt_prev,flag_prev);
`endif
	if (
		( LEDG_expected_prev[0] !== 1'bx ) && ( LEDG_prev[0] !== LEDG_expected_prev[0] )
		&& ((LEDG_expected_prev[0] !== last_LEDG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[0] = LEDG_expected_prev[0];
	end
	if (
		( LEDG_expected_prev[1] !== 1'bx ) && ( LEDG_prev[1] !== LEDG_expected_prev[1] )
		&& ((LEDG_expected_prev[1] !== last_LEDG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[1] = LEDG_expected_prev[1];
	end
	if (
		( LEDG_expected_prev[2] !== 1'bx ) && ( LEDG_prev[2] !== LEDG_expected_prev[2] )
		&& ((LEDG_expected_prev[2] !== last_LEDG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[2] = LEDG_expected_prev[2];
	end
	if (
		( LEDG_expected_prev[3] !== 1'bx ) && ( LEDG_prev[3] !== LEDG_expected_prev[3] )
		&& ((LEDG_expected_prev[3] !== last_LEDG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[3] = LEDG_expected_prev[3];
	end
	if (
		( LEDG_expected_prev[4] !== 1'bx ) && ( LEDG_prev[4] !== LEDG_expected_prev[4] )
		&& ((LEDG_expected_prev[4] !== last_LEDG_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[4] = LEDG_expected_prev[4];
	end
	if (
		( LEDG_expected_prev[5] !== 1'bx ) && ( LEDG_prev[5] !== LEDG_expected_prev[5] )
		&& ((LEDG_expected_prev[5] !== last_LEDG_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[5] = LEDG_expected_prev[5];
	end
	if (
		( LEDG_expected_prev[6] !== 1'bx ) && ( LEDG_prev[6] !== LEDG_expected_prev[6] )
		&& ((LEDG_expected_prev[6] !== last_LEDG_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[6] = LEDG_expected_prev[6];
	end
	if (
		( LEDG_expected_prev[7] !== 1'bx ) && ( LEDG_prev[7] !== LEDG_expected_prev[7] )
		&& ((LEDG_expected_prev[7] !== last_LEDG_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[7] = LEDG_expected_prev[7];
	end
	if (
		( LEDG_expected_prev[8] !== 1'bx ) && ( LEDG_prev[8] !== LEDG_expected_prev[8] )
		&& ((LEDG_expected_prev[8] !== last_LEDG_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[8] = LEDG_expected_prev[8];
	end
	if (
		( LEDG_expected_prev[9] !== 1'bx ) && ( LEDG_prev[9] !== LEDG_expected_prev[9] )
		&& ((LEDG_expected_prev[9] !== last_LEDG_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG_expected_prev);
		$display ("     Real value = %b", LEDG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEDG_exp[9] = LEDG_expected_prev[9];
	end
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( cnt_expected_prev[4] !== 1'bx ) && ( cnt_prev[4] !== cnt_expected_prev[4] )
		&& ((cnt_expected_prev[4] !== last_cnt_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[4] = cnt_expected_prev[4];
	end
	if (
		( cnt_expected_prev[5] !== 1'bx ) && ( cnt_prev[5] !== cnt_expected_prev[5] )
		&& ((cnt_expected_prev[5] !== last_cnt_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[5] = cnt_expected_prev[5];
	end
	if (
		( cnt_expected_prev[6] !== 1'bx ) && ( cnt_prev[6] !== cnt_expected_prev[6] )
		&& ((cnt_expected_prev[6] !== last_cnt_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[6] = cnt_expected_prev[6];
	end
	if (
		( cnt_expected_prev[7] !== 1'bx ) && ( cnt_prev[7] !== cnt_expected_prev[7] )
		&& ((cnt_expected_prev[7] !== last_cnt_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[7] = cnt_expected_prev[7];
	end
	if (
		( cnt_expected_prev[8] !== 1'bx ) && ( cnt_prev[8] !== cnt_expected_prev[8] )
		&& ((cnt_expected_prev[8] !== last_cnt_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[8] = cnt_expected_prev[8];
	end
	if (
		( cnt_expected_prev[9] !== 1'bx ) && ( cnt_prev[9] !== cnt_expected_prev[9] )
		&& ((cnt_expected_prev[9] !== last_cnt_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[9] = cnt_expected_prev[9];
	end
	if (
		( cnt_expected_prev[10] !== 1'bx ) && ( cnt_prev[10] !== cnt_expected_prev[10] )
		&& ((cnt_expected_prev[10] !== last_cnt_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[10] = cnt_expected_prev[10];
	end
	if (
		( cnt_expected_prev[11] !== 1'bx ) && ( cnt_prev[11] !== cnt_expected_prev[11] )
		&& ((cnt_expected_prev[11] !== last_cnt_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[11] = cnt_expected_prev[11];
	end
	if (
		( cnt_expected_prev[12] !== 1'bx ) && ( cnt_prev[12] !== cnt_expected_prev[12] )
		&& ((cnt_expected_prev[12] !== last_cnt_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[12] = cnt_expected_prev[12];
	end
	if (
		( cnt_expected_prev[13] !== 1'bx ) && ( cnt_prev[13] !== cnt_expected_prev[13] )
		&& ((cnt_expected_prev[13] !== last_cnt_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[13] = cnt_expected_prev[13];
	end
	if (
		( cnt_expected_prev[14] !== 1'bx ) && ( cnt_prev[14] !== cnt_expected_prev[14] )
		&& ((cnt_expected_prev[14] !== last_cnt_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[14] = cnt_expected_prev[14];
	end
	if (
		( cnt_expected_prev[15] !== 1'bx ) && ( cnt_prev[15] !== cnt_expected_prev[15] )
		&& ((cnt_expected_prev[15] !== last_cnt_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[15] = cnt_expected_prev[15];
	end
	if (
		( cnt_expected_prev[16] !== 1'bx ) && ( cnt_prev[16] !== cnt_expected_prev[16] )
		&& ((cnt_expected_prev[16] !== last_cnt_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[16] = cnt_expected_prev[16];
	end
	if (
		( cnt_expected_prev[17] !== 1'bx ) && ( cnt_prev[17] !== cnt_expected_prev[17] )
		&& ((cnt_expected_prev[17] !== last_cnt_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[17] = cnt_expected_prev[17];
	end
	if (
		( cnt_expected_prev[18] !== 1'bx ) && ( cnt_prev[18] !== cnt_expected_prev[18] )
		&& ((cnt_expected_prev[18] !== last_cnt_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[18] = cnt_expected_prev[18];
	end
	if (
		( cnt_expected_prev[19] !== 1'bx ) && ( cnt_prev[19] !== cnt_expected_prev[19] )
		&& ((cnt_expected_prev[19] !== last_cnt_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[19] = cnt_expected_prev[19];
	end
	if (
		( cnt_expected_prev[20] !== 1'bx ) && ( cnt_prev[20] !== cnt_expected_prev[20] )
		&& ((cnt_expected_prev[20] !== last_cnt_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[20] = cnt_expected_prev[20];
	end
	if (
		( cnt_expected_prev[21] !== 1'bx ) && ( cnt_prev[21] !== cnt_expected_prev[21] )
		&& ((cnt_expected_prev[21] !== last_cnt_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[21] = cnt_expected_prev[21];
	end
	if (
		( cnt_expected_prev[22] !== 1'bx ) && ( cnt_prev[22] !== cnt_expected_prev[22] )
		&& ((cnt_expected_prev[22] !== last_cnt_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[22] = cnt_expected_prev[22];
	end
	if (
		( cnt_expected_prev[23] !== 1'bx ) && ( cnt_prev[23] !== cnt_expected_prev[23] )
		&& ((cnt_expected_prev[23] !== last_cnt_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[23] = cnt_expected_prev[23];
	end
	if (
		( cnt_expected_prev[24] !== 1'bx ) && ( cnt_prev[24] !== cnt_expected_prev[24] )
		&& ((cnt_expected_prev[24] !== last_cnt_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[24] = cnt_expected_prev[24];
	end
	if (
		( cnt_expected_prev[25] !== 1'bx ) && ( cnt_prev[25] !== cnt_expected_prev[25] )
		&& ((cnt_expected_prev[25] !== last_cnt_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[25] = cnt_expected_prev[25];
	end
	if (
		( cnt_expected_prev[26] !== 1'bx ) && ( cnt_prev[26] !== cnt_expected_prev[26] )
		&& ((cnt_expected_prev[26] !== last_cnt_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[26] = cnt_expected_prev[26];
	end
	if (
		( cnt_expected_prev[27] !== 1'bx ) && ( cnt_prev[27] !== cnt_expected_prev[27] )
		&& ((cnt_expected_prev[27] !== last_cnt_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[27] = cnt_expected_prev[27];
	end
	if (
		( cnt_expected_prev[28] !== 1'bx ) && ( cnt_prev[28] !== cnt_expected_prev[28] )
		&& ((cnt_expected_prev[28] !== last_cnt_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[28] = cnt_expected_prev[28];
	end
	if (
		( cnt_expected_prev[29] !== 1'bx ) && ( cnt_prev[29] !== cnt_expected_prev[29] )
		&& ((cnt_expected_prev[29] !== last_cnt_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[29] = cnt_expected_prev[29];
	end
	if (
		( cnt_expected_prev[30] !== 1'bx ) && ( cnt_prev[30] !== cnt_expected_prev[30] )
		&& ((cnt_expected_prev[30] !== last_cnt_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[30] = cnt_expected_prev[30];
	end
	if (
		( cnt_expected_prev[31] !== 1'bx ) && ( cnt_prev[31] !== cnt_expected_prev[31] )
		&& ((cnt_expected_prev[31] !== last_cnt_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cnt_exp[31] = cnt_expected_prev[31];
	end
	if (
		( flag_expected_prev !== 1'bx ) && ( flag_prev !== flag_expected_prev )
		&& ((flag_expected_prev !== last_flag_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_expected_prev);
		$display ("     Real value = %b", flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_flag_exp = flag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50_2;
reg [9:0] SW;
// wires                                               
wire [9:0] LEDG;
wire [31:0] cnt;
wire flag;

wire sampler;                             

// assign statements (if any)                          
lab6 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50_2(CLOCK_50_2),
	.LEDG(LEDG),
	.SW(SW),
	.cnt(cnt),
	.flag(flag)
);

// CLOCK_50_2
always
begin
	CLOCK_50_2 = 1'b0;
	CLOCK_50_2 = #500 1'b1;
	#500;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 

lab6_vlg_sample_tst tb_sample (
	.CLOCK_50_2(CLOCK_50_2),
	.SW(SW),
	.sampler_tx(sampler)
);

lab6_vlg_check_tst tb_out(
	.LEDG(LEDG),
	.cnt(cnt),
	.flag(flag),
	.sampler_rx(sampler)
);
endmodule

